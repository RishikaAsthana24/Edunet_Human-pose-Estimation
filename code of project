import cv2
import numpy as np
import argparse
import time
from pathlib import Path

# Load OpenPose COCO Model
protoFile = "pose_deploy_linevec.prototxt"
weightsFile = "pose_iter_440000.caffemodel"
nPoints = 18  # COCO Model has 18 keypoints
POSE_PAIRS = [(1, 2), (1, 5), (2, 3), (3, 4), (5, 6), (6, 7),
              (1, 8), (8, 9), (9, 10), (1, 11), (11, 12), (12, 13),
              (1, 0), (0, 14), (14, 16), (0, 15), (15, 17), (2, 17), (5, 16)]

# Load the network
net = cv2.dnn.readNetFromCaffe(protoFile, weightsFile)

def detect_pose(image_path):
    frame = cv2.imread(image_path)
    frameWidth, frameHeight = frame.shape[1], frame.shape[0]
    inpBlob = cv2.dnn.blobFromImage(frame, 1.0 / 255, (368, 368),
                                    (0, 0, 0), swapRB=False, crop=False)
    net.setInput(inpBlob)
    output = net.forward()
    
    points = []
    for i in range(nPoints):
        probMap = output[0, i, :, :]
        minVal, prob, minLoc, point = cv2.minMaxLoc(probMap)
        x = (frameWidth * point[0]) / output.shape[3]
        y = (frameHeight * point[1]) / output.shape[2]
        points.append((int(x), int(y)) if prob > 0.1 else None)
    
    for pair in POSE_PAIRS:
        partA, partB = pair
        if points[partA] and points[partB]:
            cv2.line(frame, points[partA], points[partB], (0, 255, 0), 3)
            cv2.circle(frame, points[partA], 5, (0, 0, 255), -1)
            cv2.circle(frame, points[partB], 5, (0, 0, 255), -1)
    
    cv2.imwrite("output.jpg", frame)
    print("Pose estimation complete. Output saved as output.jpg")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("image", help="Path to input image")
    args = parser.parse_args()
    detect_pose(args.image)
